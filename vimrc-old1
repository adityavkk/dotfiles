
" Syntax
let python_highlight_all=1
syntax on

" Color Schemes
set t_Co=256
syntax enable
" set background=light
set background=dark
colorscheme hybrid
let g:PaperColor_Light_Override = { 'background' : '#abcdef', 'cursorline' : '#dfdfff', 'matchparen' : '#d6d6d6' , 'comment' : '#8e908c' }
let g:PaperColor_Dark_Override = { 'background' : '#1c1c1c', 'cursorline' : '#abcdef', 'matchparen' : '#3a3a3a', 'comment' : '#5f875f' }

" AirLine
"let g:airline#extensions#tabline#enabled = 1
"set laststatus=2
"let g:one_allow_italics = 1
"let g:airline_powerline_fonts = 1
" let g:airline_theme='bubblegum'
"let g:airline_theme='one'
" let g:airline_theme='pencil'
" let g:airline_theme='papercolor'


" Line Numbers
set ruler
set number relativenumber
set numberwidth=5

" Indenting

set cindent
set expandtab
set shiftround
set shiftwidth=2                        " an autoindent is two spaces
set tabstop=2                           " a tab is two spaces
set softtabstop=2

" Remove Trailing Whitespace
autocmd BufWritePre * %s/\s\+$//e

" set esc keys to timeout faster
set ttimeoutlen=100

set cursorline                          " line highlighing
set nowrap                              " don't wrap lines
set backspace=indent,eol,start          " backspace through everything

" Mouse
set mouse=a
set tabstop=2
set autoread

"Leader
let mapleader=','

" Standard Hotkeys
map <Leader>qh :helpclose<CR>
map <Leader>q :pclose<CR>

"Copy and paste to system clipboard
set clipboard=unnamed

" Quicker Window Movement
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" autosave on blur
au FocusLost * silent! wall

" Backup and swap files
set backupdir^=~/.vim/_backup//         " where to put backup files.
set directory^=~/.vim/_temp//           " where to put swap files.

" Toggle highlight
nmap <Leader>hs :set hlsearch! hlsearch?<CR>

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.local/share/nvim/plugged')

" Make sure you use single quotes
Plug 'scrooloose/nerdcommenter'
" On-demand loadingclilpboard
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

" Haskell
 Plug 'autozimu/LanguageClient-neovim', {
     \ 'branch': 'next',
     \ 'do': 'bash ./install.sh'
     \ }

"---(Optional for LanguageClient) Provides Multi-Entry Selection Ui
    Plug 'junegunn/fzf'

"---Async completion framework for nvim
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

"---Syntax Checking
    Plug 'vim-syntastic/syntastic'
    Plug 'panagosg7/vim-annotations'

"---Ctrl-p
    Plug 'kien/ctrlp.vim'

"---Color Schemes
    Plug 'flazz/vim-colorschemes'
		Plug 'vim-airline/vim-airline' "AirLine
    Plug 'vim-airline/vim-airline-themes'

" Initialize plugin system
call plug#end()

" Vim Settings
"   Key Modifiers:

  let mapleader=','

  " quicker splitting
  map <Leader>sp :split<CR>
  map <Leader>vp :vsplit<CR>

  " quicker window movements
  nnoremap <C-h> <C-w>h
  nnoremap <C-l> <C-w>l

" LanguageClient - Haskell

  set rtp+=~/.vim/bundle/LanguageClient-neovim
  let g:LanguageClient_serverCommands = {
    \ 'haskell': ['hie-wrapper'],
    \ 'javascript': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/local/bin/pyls'] }

  let g:LanguageClient_rootMarkers = ['*.cabal', 'stack.yaml']
  "let g:LanguageClient_settingsPath = '~/.vim/haskell/settings.json'

  nnoremap <F5> :call LanguageClient_contextMenu()<CR>
  map gh :call LanguageClient#textDocument_hover()<CR>
  map <Leader>lg :call LanguageClient#textDocument_definition()<CR>
  map <Leader>lr :call LanguageClient#textDocument_rename()<CR>
  map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
  map <Leader>lb :call LanguageClient#textDocument_references()<CR>
  map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
  map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
" Nerdtree

  " Use Ctrl-N to toggle NerdTree
  map <C-n> :NERDTreeToggle<CR>

  " Open NerdTree automatically when vim starts up and no files were specified
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

  " Open NerdTree automatically when vim starts in a directory
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

  " NERDTress File highlighting
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  call NERDTreeHighlightFile('py', 'green', 'none', 'green', '#151515')
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('hs', 'Red', 'none', 'red', '#151515')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('cpp', 'Magenta', 'none', '#ff00ff', '#151515')

  " Deoplete
  let g:deoplete#enable_at_startup = 1

  " Syntastic
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:vim_annotations_offset = '/.liquid/'
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_mode_map = { 'mode': 'active' }
  let g:syntastic_mode_map = { 'mode': 'active' }
  let g:syntastic_haskell_checkers = ['hdevtools', 'hlint', 'liquid']
  let g:syntastic_python_checkers = ['pylint']
